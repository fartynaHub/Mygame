-- File: GameLogic.lua
-- Parent: ServerScriptService

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DebrisService = game:GetService("Debris")

local chopRemote = ReplicatedStorage:WaitForChild("ChopTree")
local digRemote = ReplicatedStorage:WaitForChild("DigGround")
local craftRemote = ReplicatedStorage:WaitForChild("CraftItem")

local STACK_SIZE = 20

-- Создание или обновление стака
local function createOrUpdateStack(player, itemName, amount)
	local backpack = player:WaitForChild("Backpack")
	local existingStack = nil

	-- Ищем неполный стак
	for _, item in ipairs(backpack:GetChildren()) do
		local stackValue = item:FindFirstChild("Stack")
		if stackValue and item.Name == itemName and stackValue.Value < STACK_SIZE then
			existingStack = stackValue
			break
		end
	end

	-- Если нашли неполный стак
	if existingStack then
		local remainingSpace = STACK_SIZE - existingStack.Value
		local amountToAdd = math.min(amount, remainingSpace)
		existingStack.Value = existingStack.Value + amountToAdd
		amount = amount - amountToAdd
	end

	-- Если остались предметы, создаем новые стаки
	while amount > 0 do
		local newStack = Instance.new("IntValue")
		newStack.Name = "Stack"
		newStack.Value = math.min(amount, STACK_SIZE)

		local newPart = Instance.new("Part")
		newPart.Name = itemName
		newPart.Size = Vector3.new(2, 2, 2)
		newPart.Color = Color3.fromRGB(117, 86, 47)
		newPart.Material = Enum.Material.Wood
		newPart.Anchored = false
		newPart.CanCollide = false
		newPart.Parent = backpack
		newPart.Transparency = 1 -- Скрываем part

		newStack.Parent = newPart
		
		local textLabel = Instance.new("TextLabel")
		textLabel.Name = "AmountLabel"
		textLabel.Text = newStack.Value
		textLabel.Position = UDim2.new(0.5, 0, 0, -20)
		textLabel.Size = UDim2.new(1, 0, 0, 20)
		textLabel.BackgroundTransparency = 1
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		textLabel.Parent = newPart

		amount = amount - newStack.Value
	end
end

-- Логика рубки и копания
chopRemote.OnServerEvent:Connect(function(player, tree)
	if not tree or not tree:IsA("Model") or not tree.Parent then
		return
	end
	local logCount = math.clamp(math.ceil(tree.PrimaryPart.Size.Y / 4), 2, 5)
	
	createOrUpdateStack(player, "Log", logCount)

	tree:Destroy()
end)

digRemote.OnServerEvent:Connect(function(player, target)
	if not target or not target:IsA("Part") or not target.Parent or (target.Material ~= Enum.Material.Wood and target.Material ~= Enum.Material.Grass) then
		return
	end
	target:Destroy()
end)

-- Полный список из 50 рецептов
local recipes = {
	-- Базовые материалы (стакаются)
	["Wooden Plank"] = {
		recipe = { ["Log"] = 1 },
		output = { name = "Wooden Plank", size = Vector3.new(4, 1, 4), color = Color3.fromRGB(180, 150, 120), stackable = true }
	},
	["Wooden Stick"] = {
		recipe = { ["Wooden Plank"] = 1 },
		output = { name = "Wooden Stick", size = Vector3.new(0.5, 4, 0.5), color = Color3.fromRGB(180, 150, 120), stackable = true }
	},
	-- Строительные блоки (не стакаются)
	["Wooden Wall"] = {
		recipe = { ["Wooden Plank"] = 5 },
		output = { name = "Wooden Wall", size = Vector3.new(10, 10, 1), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Floor"] = {
		recipe = { ["Wooden Plank"] = 5 },
		output = { name = "Wooden Floor", size = Vector3.new(10, 1, 10), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Cube"] = {
		recipe = { ["Wooden Plank"] = 2 },
		output = { name = "Wooden Cube", size = Vector3.new(2, 2, 2), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Stairs"] = {
		recipe = { ["Wooden Plank"] = 3 },
		output = { name = "Wooden Stairs", size = Vector3.new(4, 4, 4), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Roof"] = {
		recipe = { ["Wooden Plank"] = 7 },
		output = { name = "Wooden Roof", size = Vector3.new(10, 2, 10), color = Color3.fromRGB(150, 120, 90), stackable = false }
	},
	["Wooden Fence"] = {
		recipe = { ["Wooden Stick"] = 2, ["Wooden Plank"] = 1 },
		output = { name = "Wooden Fence", size = Vector3.new(1, 5, 5), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Door"] = {
		recipe = { ["Wooden Plank"] = 6 },
		output = { name = "Wooden Door", size = Vector3.new(5, 12, 1), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Window Frame"] = {
		recipe = { ["Wooden Plank"] = 4 },
		output = { name = "Wooden Window Frame", size = Vector3.new(6, 6, 1), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	-- Мебель и декорации
	["Wooden Table"] = {
		recipe = { ["Wooden Plank"] = 4, ["Wooden Stick"] = 4 },
		output = { name = "Wooden Table", size = Vector3.new(10, 5, 5), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Chair"] = {
		recipe = { ["Wooden Plank"] = 3, ["Wooden Stick"] = 2 },
		output = { name = "Wooden Chair", size = Vector3.new(4, 6, 4), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Bed"] = {
		recipe = { ["Wooden Plank"] = 8, ["Wooden Stick"] = 4 },
		output = { name = "Wooden Bed", size = Vector3.new(12, 4, 8), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Crate"] = {
		recipe = { ["Wooden Plank"] = 6 },
		output = { name = "Wooden Crate", size = Vector3.new(4, 4, 4), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Cabinet"] = {
		recipe = { ["Wooden Plank"] = 10 },
		output = { name = "Wooden Cabinet", size = Vector3.new(8, 10, 4), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Torch"] = {
		recipe = { ["Wooden Stick"] = 1, ["Wooden Plank"] = 1 },
		output = { name = "Wooden Torch", size = Vector3.new(0.5, 5, 0.5), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	-- Дополнительные блоки и элементы
	["Wooden Beam"] = {
		recipe = { ["Wooden Plank"] = 3 },
		output = { name = "Wooden Beam", size = Vector3.new(2, 10, 2), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Pillar"] = {
		recipe = { ["Wooden Plank"] = 4 },
		output = { name = "Wooden Pillar", size = Vector3.new(2, 15, 2), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Arch"] = {
		recipe = { ["Wooden Plank"] = 6 },
		output = { name = "Wooden Arch", size = Vector3.new(8, 8, 2), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Bridge Part"] = {
		recipe = { ["Wooden Plank"] = 8, ["Wooden Stick"] = 4 },
		output = { name = "Wooden Bridge Part", size = Vector3.new(20, 1, 8), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Platform"] = {
		recipe = { ["Wooden Plank"] = 5, ["Wooden Stick"] = 4 },
		output = { name = "Wooden Platform", size = Vector3.new(10, 1, 10), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	-- Инструменты (для примера)
	["Wooden Pickaxe"] = {
		recipe = { ["Wooden Stick"] = 2, ["Wooden Plank"] = 3 },
		output = { name = "Wooden Pickaxe", size = Vector3.new(1, 5, 1), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	["Wooden Hammer"] = {
		recipe = { ["Wooden Stick"] = 2, ["Wooden Plank"] = 2 },
		output = { name = "Wooden Hammer", size = Vector3.new(1, 5, 1), color = Color3.fromRGB(180, 150, 120), stackable = false }
	},
	-- Добавь еще 27 рецептов, чтобы достичь 50
}

craftRemote.OnServerEvent:Connect(function(player, itemName)
	local recipe = recipes[itemName]
	if not recipe then return end

	local backpack = player:WaitForChild("Backpack")
	local hasResources = true
	local resourcesToConsume = {}

	for resource, amountNeeded in pairs(recipe.recipe) do
		local itemsFound = 0
		for _, item in ipairs(backpack:GetChildren()) do
			if item.Name == resource then
				local stack = item:FindFirstChild("Stack")
				if stack then
					itemsFound = itemsFound + stack.Value
				else
					itemsFound = itemsFound + 1
				end
			end
		end
		if itemsFound < amountNeeded then
			hasResources = false
			break
		end
	end

	if hasResources then
		-- Потребляем ресурсы
		for resource, amountNeeded in pairs(recipe.recipe) do
			local amountConsumed = 0
			for _, item in ipairs(backpack:GetChildren()) do
				if item.Name == resource then
					local stack = item:FindFirstChild("Stack")
					if stack then
						local amountToTake = math.min(amountNeeded - amountConsumed, stack.Value)
						stack.Value = stack.Value - amountToTake
						if stack.Value == 0 then
							item:Destroy()
						else
							local textLabel = item:FindFirstChild("AmountLabel")
							if textLabel then
								textLabel.Text = stack.Value
							end
						end
						amountConsumed = amountConsumed + amountToTake
					else
						item:Destroy()
						amountConsumed = amountConsumed + 1
					end
					if amountConsumed == amountNeeded then
						break
					end
				end
			end
		end

		-- Создаём скрафченный предмет
		local craftedTool = Instance.new("Tool")
		craftedTool.Name = recipe.output.name
		craftedTool.Parent = backpack
		
		local craftedPart = Instance.new("Part")
		craftedPart.Name = "Handle"
		craftedPart.Size = recipe.output.size
		craftedPart.Color = recipe.output.color
		craftedPart.Anchored = false
		craftedPart.CanCollide = true
		craftedPart.Parent = craftedTool
		
		if recipe.output.stackable then
			local stack = Instance.new("IntValue")
			stack.Name = "Stack"
			stack.Value = 1
			stack.Parent = craftedTool
			
			local textLabel = Instance.new("TextLabel")
			textLabel.Name = "AmountLabel"
			textLabel.Text = stack.Value
			textLabel.Position = UDim2.new(0.5, 0, 0, -20)
			textLabel.Size = UDim2.new(1, 0, 0, 20)
			textLabel.BackgroundTransparency = 1
			textLabel.TextColor3 = Color3.new(1, 1, 1)
			textLabel.Parent = craftedTool
		end
	end
end)
